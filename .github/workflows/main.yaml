name: Main Pipeline
run-name: ${{ github.actor }} is running GitHub Actions üöÄ
on: [push]
jobs:

  Init:
    runs-on: ubuntu-latest
    steps:

      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and the repository is ${{ github.repository }}."
      - run: echo "üçè This job's status is ${{ job.status }}."
  
  Build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Make gradlew executable
        run: |
          chmod +x ./www/gradlew
          chmod +x ./api/gradlew

      - name: Build www
        working-directory: ./www
        run: ./gradlew build --no-daemon

      - name: Build api
        working-directory: ./api
        run: ./gradlew build --no-daemon

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push www-server-image
        uses: docker/build-push-action@v6
        with:
          context: ./www
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/www-server-image:latest

      - name: Build and push api-server-image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/api-server-image:latest

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload Docker Compose Template to Amazon S3
        run: aws s3 cp ./docker-compose.yaml s3://jhops881-web-server-files/docker-compose.yaml

      - name: Upload NGINX config to Amazon S3
        run: aws s3 cp ./nginx.conf s3://jhops881-web-server-files/nginx.conf

  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color -out=tfplan -input=false
        continue-on-error: false

      - name: Terraform Apply | Deploy Production Infrastructure
        run: terraform apply -input=false tfplan

      - name: Configure/Update Web Server
        run: |
          # Get the web server instance ID
          INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)

          # Need to temporarily add the IP of the runner to the SG to allow SSH

          # Get the Public IP of the runner
          RUNNER_IP=$(curl https://checkip.amazonaws.com)

          # Get the SG of the web server
          SG_ID=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[*].Instances[*].SecurityGroups[*].[GroupId]" \
          --output text)

          # Add the rule to permit runner connection
          SGR_ID=$(aws ec2 authorize-security-group-ingress \
          --group-id $SG_ID \
          --protocol tcp --port 22 --cidr $RUNNER_IP/32 \
          --query "SecurityGroupRules[0].SecurityGroupRuleId" \
          --output text)

          # Retry SSH connection every 60 seconds until it works
          echo "Trying to connect to instance: $INSTANCE_ID"
          until aws ec2-instance-connect ssh --instance-id "$INSTANCE_ID"; do
            echo "Connection failed. Retrying in 60 seconds..."
            sleep 60
          done

          echo "SSH connected successfully."

          cd /home/ec2-user

          docker compose down

          # Download production files from S3
          aws s3api get-object --bucket jhops881-web-server-files --key docker-compose.yaml /home/ec2-user/docker-compose.yaml
          aws s3api get-object --bucket jhops881-web-server-files --key nginx.conf /home/ec2-user/nginx.conf

          # Update domain in NGINX config from localhost to production domain
          sed -i 's/localhost/jhops\.me/g' nginx.conf # change from the dev to production domain name.

          # Exchange local dev builds for the production images
          sed -i 's|build: \./www|image: jhops881/www-server-image:latest|g' docker-compose.yaml
          sed -i 's|build: \./api|image: jhops881/api-server-image:latest|g' docker-compose.yaml

          # Start the web servers
          docker compose up -d

          exit

          aws ec2 revoke-security-group-ingress \
          --group-id $SG_ID \
          --security-group-rule-ids $SGR_ID
